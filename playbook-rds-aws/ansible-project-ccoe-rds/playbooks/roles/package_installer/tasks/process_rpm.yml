---
# Local RPM Package Installation Playbook

- name: Find and install local RPM package
  block:
    - name: Identify exact package file path
      find:
        paths: "{{ package_item.source_dir | default('/tmp/aws-rds/', true) }}"
        patterns: "{{ package_item.file | default('*' + package_item.name + '*.rpm', true) }}"
        use_regex: no
      register: package_files

    - name: Set package source path
      set_fact:
        package_source_path: "{{ package_files.files[0].path }}"
      when: package_files.files | length > 0

    - name: Fail if no package file found
      fail:
        msg: |
          No RPM package found for {{ package_item.name }}
          Search directory: {{ package_item.source_dir | default('/tmp/aws-rds/', true) }}
          Search pattern: {{ package_item.file | default('*' + package_item.name + '*.rpm', true) }}
          Available files:
          {{ package_files.files | map(attribute='path') | list | to_nice_yaml }}
      when: package_files.files | length == 0

- name: Debug selected package path
  debug:
    msg: "Installing package from: {{ package_source_path }}"

- name: Check if package is already installed
  shell: rpm -q {{ package_item.name }}
  register: rpm_check
  failed_when: false
  changed_when: false

- name: Install RPM package directly from local file
  shell: rpm -ivh --force {{ package_source_path }}
  when: rpm_check.rc != 0
  register: rpm_install
  failed_when: 
    - rpm_install.rc != 0
    - "'already installed' not in rpm_install.stderr"

- name: Detailed package information gathering
  block:
    - name: Retrieve package details
      shell: |
        echo "===== PACKAGE INFORMATION ====="
        rpm -qi {{ package_item.name }} | grep -E 'Name|Version|Release|Description'
        echo ""
        echo "===== INSTALLED FILES ====="
        rpm -ql {{ package_item.name }} | head -10
        total_files=$(rpm -ql {{ package_item.name }} | wc -l)
        if [ $total_files -gt 10 ]; then
          echo "... and $(( $total_files - 10 )) more files"
        fi
      register: package_info
      changed_when: false

    - name: Display package information
      debug:
        var: package_info.stdout_lines

    - name: Version check
      block:
        - name: Run version check command
          shell: "{{ package_item.version_check_cmd }}"
          register: version_check
          changed_when: false
          failed_when: false
        
        - name: Display version
          debug:
            msg: "Version check for {{ package_item.name }}: {{ version_check.stdout }}"
          when: version_check.rc == 0
      when: package_item.version_check_cmd is defined

  when: show_detailed_output | bool