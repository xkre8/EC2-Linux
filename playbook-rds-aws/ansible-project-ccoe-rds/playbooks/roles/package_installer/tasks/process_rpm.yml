---
# Playbook for processing and installing RPM packages

- block:
    - name: Download RPM package if URL is provided
      get_url:
        url: "{{ package_item.url }}"
        dest: "{{ temp_download_dir }}/{{ package_item.file }}"
        mode: '0644'
      register: download_result
      when: package_item.url is defined
  rescue:
    - name: Report download failure
      fail:
        msg: "Failed to download {{ package_item.file }} from {{ package_item.url }}"

- name: Set source path for local package
  set_fact:
    package_source_path: "{{ package_item.source_dir | default(packages[0].source_dir) }}/{{ package_item.file }}"
  when: package_item.url is not defined

- name: Set source path for downloaded package
  set_fact:
    package_source_path: "{{ temp_download_dir }}/{{ package_item.file }}"
  when: package_item.url is defined

- name: Check if package file exists
  stat:
    path: "{{ package_source_path }}"
  register: package_file_check

- name: Fail if package file does not exist
  fail:
    msg: "Package file {{ package_source_path }} does not exist!"
  when: not package_file_check.stat.exists

- name: Check if package is already installed
  command: rpm -q {{ package_item.name }}
  register: rpm_check
  failed_when: false
  changed_when: false

- name: Import GPG key if provided
  rpm_key:
    key: "{{ package_item.gpg_key }}"
    state: present
  when: package_item.gpg_key is defined

- name: Install RPM package
  yum:
    name: "{{ package_source_path }}"
    state: present
    disable_gpg_check: "{{ package_item.disable_gpg_check | default(disable_gpg_check | default(false)) }}"
  register: rpm_install
  when: rpm_check.rc != 0
  
- name: Debug package installation
  debug:
    msg: "Installing package {{ package_item.name }} from {{ package_source_path }}"

- name: Get detailed package information
  block:
    - name: Retrieve package details
      shell: |
        echo "===== PACKAGE INFORMATION ====="
        rpm -qi {{ package_item.name }} | grep -E 'Name|Version|Release|Description'
        echo ""
        echo "===== SERVICE STATUS ====="
        if systemctl list-unit-files | grep -q {{ package_item.name }}; then
          systemctl status {{ package_item.name }} 2>/dev/null || echo "Service exists but may not be running"
        else
          echo "No systemd service found for {{ package_item.name }}"
          # Try to find related services
          rpm -ql {{ package_item.name }} | grep -E '\.service$' | while read service_file; do
            service_name=$(basename "$service_file")
            echo "Found service file: $service_name"
            systemctl status ${service_name} 2>/dev/null || echo "Service ${service_name} exists but may not be running"
          done
        fi
        echo ""
        echo "===== INSTALLED FILES ====="
        rpm -ql {{ package_item.name }} | head -10
        total_files=$(rpm -ql {{ package_item.name }} | wc -l)
        if [ $total_files -gt 10 ]; then
          echo "... and $(( $total_files - 10 )) more files"
        fi
      register: package_info
      changed_when: false
  
- name: Display package information
  debug:
    var: package_info.stdout_lines
  
- name: Version check
  block:
    - name: Run version check command
      shell: "{{ package_item.version_check_cmd }}"
      register: version_check
      changed_when: false
      failed_when: false
      
    - name: Display version
      debug:
         msg: "Version check for {{ package_item.name }}: {{ version_check.stdout }}"
      when: version_check.rc == 0
  when: package_item.version_check_cmd is defined
