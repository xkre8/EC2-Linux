---
- block:
    - name: Download RPM package if URL is provided
      get_url:
        url: "{{ package_item.url }}"
        dest: "{{ temp_download_dir }}/{{ package_item.file }}"
        mode: '0644'
      register: download_result
      when: package_item.url is defined
  rescue:
    - name: Report download failure
      fail:
        msg: "Failed to download {{ package_item.file }} from {{ package_item.url }}"

- name: Set source path for local package
  set_fact:
    package_source_path: "{{ package_item.source_dir | default(packages[0].source_dir) }}/{{ package_item.file }}"
  when: package_item.url is not defined

- name: Set source path for downloaded package
  set_fact:
    package_source_path: "{{ temp_download_dir }}/{{ package_item.file }}"
  when: package_item.url is defined

- name: Check if RPM file exists
  stat:
    path: "{{ package_source_path }}"
  register: rpm_file_check

- name: Fail if RPM file does not exist
  fail:
    msg: "RPM file {{ package_source_path }} does not exist!"
  when: not rpm_file_check.stat.exists

- name: Check if RPM is already installed
  command: rpm -q {{ package_item.name }}
  register: rpm_check
  failed_when: false
  changed_when: false

- name: Import GPG key if provided
  rpm_key:
    key: "{{ package_item.gpg_key }}"
    state: present
  when: package_item.gpg_key is defined

- name: Install RPM package with rpm directly (ignore dependencies if needed)
  ansible.builtin.command: >
    rpm -ivh {% if package_item.ignore_deps | default(false) %}--nodeps{% endif %} "{{ package_source_path }}"
  register: rpm_install
  when: rpm_check.rc != 0
  async: 600  # timeout ใน seconds (10 นาที)
  poll: 5    # ตรวจสอบทุก 5 วินาที
  failed_when: rpm_install.rc != 0 and "already installed" not in rpm_install.stderr
  changed_when: rpm_install.rc == 0

  
- name: Debug package_source_path
  debug:
    msg: "Installing package from {{ package_source_path }}"

- name: Get installed package information
  shell: |
    echo "===== PACKAGE INFORMATION ====="
    rpm -qi {{ package_item.name }} | grep -E 'Name|Version|Release|Description'
    echo ""
    echo "===== SERVICE STATUS ====="
    if systemctl list-unit-files | grep -q {{ package_item.name }}; then
      systemctl status {{ package_item.name }} 2>/dev/null || echo "Service exists but may not be running"
    else
      echo "No systemd service found for {{ package_item.name }}"
      # Try to check for other services that might have been installed by this RPM
      echo "Looking for related services..."
      rpm -ql {{ package_item.name }} | grep -E '\.service$' | while read service_file; do
        service_name=$(basename "$service_file")
        echo "Found service file: $service_name"
        systemctl status ${service_name} 2>/dev/null || echo "Service ${service_name} exists but may not be running"
      done
    fi
    echo ""
    echo "===== FILES INSTALLED ====="
    rpm -ql {{ package_item.name }} | head -10
    if [ $(rpm -ql {{ package_item.name }} | wc -l) -gt 10 ]; then
      echo "... and $(( $(rpm -ql {{ package_item.name }} | wc -l) - 10 )) more files"
    fi
    echo ""
  register: package_info
  changed_when: false
  when: show_detailed_output | bool

- name: Include version check
  include_tasks: check_version.yml