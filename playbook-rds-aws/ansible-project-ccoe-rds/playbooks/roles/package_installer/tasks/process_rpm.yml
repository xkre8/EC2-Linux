---
- block:
    - name: Set source path for local package
      set_fact:
        package_source_path: "{{ package_item.source_dir | default(packages_default_source_dir) }}/{{ package_item.file }}"

    - name: Check if RPM file exists
      stat:
        path: "{{ package_source_path }}"
      register: rpm_file_check

    - name: Fail if RPM file does not exist
      fail:
        msg: "RPM file {{ package_source_path }} does not exist!"
      when: not rpm_file_check.stat.exists

    - name: Check if RPM is already installed
      command: rpm -q {{ package_item.name }}
      register: rpm_check
      failed_when: false
      changed_when: false
      
    - name: Debug package status
      debug:
        msg: "Package {{ package_item.name }} status: {{ 'installed' if rpm_check.rc == 0 else 'not installed' }}"
      
    - name: Install RPM package (offline mode)
      command: >
        rpm -ivh {{ '--nodeps' if package_item.ignore_deps | default(false) else '' }} {{ package_source_path }}
      register: rpm_install
      when: 
        - rpm_check.rc != 0
        - package_item.type == "rpm"
      failed_when: 
        - rpm_install.rc != 0 
        - "'already installed' not in rpm_install.stderr|default('')"
      changed_when: rpm_install.rc == 0

    - name: Create directory for TGZ extraction
      file:
        path: "{{ package_item.extract_path | default('/opt') }}"
        state: directory
        mode: '0755'
      when: 
        - package_item.type == "tgz"
        - rpm_check.rc != 0

    - name: Extract TGZ package
      unarchive:
        src: "{{ package_source_path }}"
        dest: "{{ package_item.extract_path | default('/opt') }}"
        remote_src: yes
      when: 
        - package_item.type == "tgz"
        - rpm_check.rc != 0

    - name: Run version check command if defined
      shell: "{{ package_item.version_check_cmd }}"
      register: version_check
      changed_when: false
      failed_when: false
      when: package_item.version_check_cmd is defined

    - name: Show version check result
      debug:
        msg: "Version check result: {{ version_check.stdout|default('Command failed') }}"
      when: package_item.version_check_cmd is defined

    # For RPM packages, get detailed info
    - name: Get basic package info for RPM
      command: rpm -qi {{ package_item.name }}
      register: rpm_basic_info
      changed_when: false
      failed_when: false
      when: 
        - package_item.type == "rpm"
        - rpm_check.rc == 0
        - show_detailed_output | bool

    - name: Check for services related to package
      shell: rpm -ql {{ package_item.name }} | grep -E '\.service$' || true
      register: service_files
      changed_when: false
      failed_when: false
      when: 
        - package_item.type == "rpm"
        - rpm_check.rc == 0
        - show_detailed_output | bool

    - name: Display service information
      debug:
        msg: "Service files found for {{ package_item.name }}: {{ service_files.stdout_lines|default([]) }}"
      when: 
        - package_item.type == "rpm"
        - rpm_check.rc == 0
        - show_detailed_output | bool
        - service_files.stdout_lines|default([]) | length > 0