---
- block:
    - name: Download package if URL is provided
      get_url:
        url: "{{ package_item.url }}"
        dest: "{{ temp_download_dir }}/{{ package_item.file }}"
        mode: '0644'
      register: download_result
      when: package_item.url is defined
  rescue:
    - name: Report download failure
      fail:
        msg: "Failed to download {{ package_item.file }} from {{ package_item.url }}"

- name: Set source path for local package
  set_fact:
    package_source_path: "{{ package_item.source_dir | default(packages[0].source_dir) }}/{{ package_item.file }}"
  when: package_item.url is not defined

- name: Set source path for downloaded package
  set_fact:
    package_source_path: "{{ temp_download_dir }}/{{ package_item.file }}"
  when: package_item.url is defined

- name: Check if package file exists
  stat:
    path: "{{ package_source_path }}"
  register: package_file_check

- name: Fail if package file does not exist
  fail:
    msg: "Package file {{ package_source_path }} does not exist!"
  when: not package_file_check.stat.exists

- name: Extract TGZ package if needed
  unarchive:
    src: "{{ package_source_path }}"
    dest: "{{ package_item.extract_path | default(temp_download_dir) }}"
    remote_src: yes
  when: package_item.type == 'tgz'

- name: Check if package is already installed
  shell: "{{ package_item.version_check_cmd }}"
  register: package_check
  failed_when: false
  changed_when: false
  ignore_errors: true

- name: Install RPM package
  yum:
    name: "{{ package_source_path }}"
    state: present
    disable_gpg_check: "{{ package_item.disable_gpg_check | default(disable_gpg_check | default(true)) }}"
  register: "rpm_install_{{ package_index }}"
  when: package_item.type == 'rpm' and package_check.rc != 0

- name: Handle installation of non-standard package types
  block:
    - name: Install mongosh 
      copy:
        src: "{{ package_source_path | replace('.tgz', '-linux-x64-openssl3') }}"
        dest: "/opt/my-app/"
        remote_src: yes
        mode: '0755'
      when: package_item.type == 'tgz' and 'mongosh' in package_item.name
  when: package_item.type != 'rpm'

- name: Detailed package information
  block:
    - name: Get installed package information
      shell: |
        echo "===== PACKAGE INFORMATION ====="
        if [ "{{ package_item.type }}" == "rpm" ]; then
          rpm -qi {{ package_item.name }} | grep -E 'Name|Version|Release|Description'
        else
          echo "Package type is not RPM"
        fi
        echo ""
        echo "===== VERSION CHECK ====="
        {{ package_item.version_check_cmd }}
        echo ""
        echo "===== FILES INSTALLED ====="
        if [ "{{ package_item.type }}" == "rpm" ]; then
          rpm -ql {{ package_item.name }} | head -10
          if [ $(rpm -ql {{ package_item.name }} | wc -l) -gt 10 ]; then
            echo "... and $(( $(rpm -ql {{ package_item.name }} | wc -l) - 10 )) more files"
          fi
        else
          ls -la "{{ package_item.extract_path | default(temp_download_dir) }}"
        fi
      register: package_info
      changed_when: false
      when: show_detailed_output | bool
  rescue:
    - name: Handle version check or info gathering errors
      debug:
        msg: "Could not gather detailed information for {{ package_item.name }}"