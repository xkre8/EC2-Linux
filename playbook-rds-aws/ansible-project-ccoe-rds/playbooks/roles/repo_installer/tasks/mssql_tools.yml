---
- name: Set MSSQL repository facts
  set_fact:
    mssql_repo: "{{ repositories | selectattr('name', 'equalto', 'mssql') | first }}"

- name: Get system architecture
  shell: "uname -m"
  register: system_arch
  changed_when: false

- name: Set architecture variable
  set_fact:
    system_architecture: "{{ system_arch.stdout }}"

- name: Debug system architecture
  debug:
    var: system_architecture
    verbosity: 0

- name: Ensure download directory exists
  file:
    path: "{{ download_folder | default('/tmp/downloads') }}"
    state: directory
    mode: '0755'
  become: true

- name: Setup Microsoft MSSQL repository
  block:
    - name: Download Microsoft repository file to local folder
      get_url:
        url: "{{ mssql_repo.repo_url }}"
        dest: "{{ download_folder | default('/tmp/downloads') }}/{{ mssql_repo.repo_url | basename }}"
        mode: '0644'
        timeout: 60
        force: true
      become: true
      register: repo_download_local

    - name: Copy repository file from download folder to system location
      copy:
        src: "{{ download_folder | default('/tmp/downloads') }}/{{ mssql_repo.repo_url | basename }}"
        dest: "{{ mssql_repo.repo_file }}"
        mode: '0644'
        remote_src: yes
      become: true
      register: repo_copy

    - name: Ensure repository is enabled
      replace:
        path: "{{ mssql_repo.repo_file }}"
        regexp: 'enabled=0'
        replace: 'enabled=1'
      become: true
      when: repo_copy is defined

    - name: Update DNF cache
      shell: "dnf clean all && dnf makecache"
      become: true
      changed_when: true
  
- name: Download MSSQL tools package to local folder
  block:
    - name: Check available MSSQL packages matching system architecture
      shell: "dnf list --available mssql-tools.{{ system_architecture }} unixODBC.{{ system_architecture }} unixODBC-devel.{{ system_architecture }}"
      register: mssql_package_info
      changed_when: false
      become: true
      ignore_errors: true

    - name: Display available packages
      debug:
        var: mssql_package_info.stdout_lines
        verbosity: 0
      when: mssql_package_info.rc == 0

    - name: Download MSSQL tools package file with correct architecture
      shell: "dnf download --destdir={{ download_folder | default('/tmp/downloads') }} --archlist={{ system_architecture }} mssql-tools unixODBC unixODBC-devel"
      become: true
      register: mssql_download
      changed_when: true

    - name: List downloaded files
      shell: "ls -la {{ download_folder | default('/tmp/downloads') }}"
      register: downloaded_files
      changed_when: false
      become: true

    - name: Display downloaded files
      debug:
        var: downloaded_files.stdout_lines
        verbosity: 0

- name: Install and configure MSSQL tools
  block:
    - name: Install MSSQL tools directly from repo if download fails
      dnf:
        name:
          - mssql-tools
          - unixODBC
          - unixODBC-devel
        state: present
        disable_gpg_check: true
      become: true
      register: direct_installation
      environment:
        ACCEPT_EULA: Y
      when: mssql_download is failed
      ignore_errors: true

    - name: Install MSSQL tools and dependencies from downloaded files
      shell: "cd {{ download_folder | default('/tmp/downloads') }} && export ACCEPT_EULA=Y && dnf install -y mssql-tools-*.{{ system_architecture }}.rpm unixODBC-*.{{ system_architecture }}.rpm unixODBC-devel-*.{{ system_architecture }}.rpm --nogpgcheck"
      become: true
      register: mssql_installation
      when: mssql_download is succeeded
      ignore_errors: true

    - name: Configure MSSQL tools environment
      block:
        - name: Add MSSQL tools to system PATH
          copy:
            dest: /etc/profile.d/mssql-tools.sh
            content: |
              # Add MSSQL Tools to PATH
              export PATH="$PATH:/opt/mssql-tools/bin"
            mode: '0644'
          become: true

        - name: Create symlinks for MSSQL tools
          file:
            src: "/opt/mssql-tools/bin/{{ item }}"
            dest: "/usr/local/bin/{{ item }}"
            state: link
          with_items:
            - sqlcmd
            - bcp
          become: true
      when: (mssql_installation is defined and mssql_installation.rc == 0) or 
            (direct_installation is defined and direct_installation.failed is not defined)

- name: Verify installation and report status
  block:
    - name: Check MSSQL tools version
      shell: |
        if command -v sqlcmd &>/dev/null || [ -f /opt/mssql-tools/bin/sqlcmd ]; then
          echo "MSSQL Tools installed successfully"
          echo "Version: $(/opt/mssql-tools/bin/sqlcmd -? 2>&1 | grep -i version)"
          echo "Location: /opt/mssql-tools/bin/sqlcmd"
        else
          echo "MSSQL Tools installation failed"
        fi
      register: mssql_details
      changed_when: false
      ignore_errors: true

    - name: Display installation details
      debug:
        var: mssql_details.stdout_lines
        verbosity: 0
      when: mssql_details is defined

    - name: Write installation status to report
      blockinfile:
        path: "{{ output_file }}"
        marker: "# {mark} MSSQL TOOLS INSTALLATION"
        block: |
          MSSQL Tools packages: {{ 'INSTALLED' if (mssql_installation is defined and mssql_installation.rc == 0) or (direct_installation is defined and direct_installation.failed is not defined) else 'INSTALLATION FAILED' }}
          {{ mssql_details.stdout | default('Status unknown') }}
      become: true
      when: output_file is defined
  when: show_detailed_output | default(true) | bool